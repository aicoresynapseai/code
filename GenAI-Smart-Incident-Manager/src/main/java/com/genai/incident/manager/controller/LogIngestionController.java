package com.genai.incident.manager.controller;

import com.genai.incident.manager.model.IncidentReport;
import com.genai.incident.manager.model.LogEntry;
import com.genai.incident.manager.service.GenAIService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * REST Controller for ingesting application log entries.
 * This controller acts as the entry point for logs/metrics that need to be
 * analyzed by the GenAI service.
 */
@RestController
@RequestMapping("/api") // Base path for all endpoints in this controller
public class LogIngestionController {

    private final GenAIService genAIService;

    /**
     * Constructor for dependency injection of GenAIService.
     * Spring automatically injects the GenAIService bean.
     * @param genAIService The service responsible for GenAI analysis.
     */
    public LogIngestionController(GenAIService genAIService) {
        this.genAIService = genAIService;
    }

    /**
     * Handles POST requests to "/api/logs" for ingesting new log entries.
     * The incoming JSON request body is automatically mapped to a LogEntry object.
     *
     * @param logEntry The log entry received from the client.
     * @return A ResponseEntity containing the IncidentReport generated by the GenAI service.
     */
    @PostMapping("/logs")
    public ResponseEntity<IncidentReport> ingestLog(@RequestBody LogEntry logEntry) {
        // Log the received entry for debugging purposes (in a real app, use a proper logger)
        System.out.println("Received log: " + logEntry.toString());

        // Call the GenAI service to analyze the log entry
        IncidentReport incidentReport = genAIService.analyzeLog(logEntry);

        // Log the generated report
        System.out.println("Generated incident report: " + incidentReport.toString());

        // Return the incident report with an OK status
        // The IncidentReport will be automatically converted to JSON by Spring.
        return new ResponseEntity<>(incidentReport, HttpStatus.OK);
    }
}