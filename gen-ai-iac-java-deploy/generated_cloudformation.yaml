# This file is dynamically generated by 'gen-ai-iac-generator.py' based on your input configuration.
# DO NOT EDIT THIS FILE MANUALLY. Your changes will be overwritten.

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for OrderService Java Microservice (development)
  - Generated by GenAI
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: OrderService-development-VPC
      - Key: Environment
        Value: development
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Join:
        - ''
        - - Fn::Sub: ${AWS::Region}
          - a
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: OrderService-development-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Join:
        - ''
        - - Fn::Sub: ${AWS::Region}
          - b
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: OrderService-development-PublicSubnetB
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: OrderService-development-IGW
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: OrderService-development-PublicRouteTable
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable PostgreSQL access from application
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Fn::GetAtt:
          - AppSecurityGroup
          - GroupId
      Tags:
      - Key: Name
        Value: OrderService-development-DBSG
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for OrderService RDS DB
      SubnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      Tags:
      - Key: Name
        Value: OrderService-development-DBSubnetGroup
  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: ordersdb
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '14.5'
      MasterUsername: ordersuser
      MasterUserPassword: MySuperSecretPassword123CF
      VPCSecurityGroups:
      - Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      DeletionProtection: false
      Tags:
      - Key: Name
        Value: OrderService-development-PostgreSQLDB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/S to the Load Balancer
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: OrderService-development-LBSG
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: OrderService-development-ALB
      Scheme: internet-facing
      SecurityGroups:
      - Fn::GetAtt:
        - LoadBalancerSecurityGroup
        - GroupId
      Subnets:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      Tags:
      - Key: Name
        Value: OrderService-development-ALB
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: OrderService-development-TG
      Port: 8080
      Protocol: HTTP
      VpcId:
        Ref: VPC
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckPort: '8080'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
      - Key: Name
        Value: OrderService-development-TG
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppTargetGroup
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/S and app port to Spring Boot instances
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId:
          Fn::GetAtt:
          - LoadBalancerSecurityGroup
          - GroupId
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: OrderService-development-AppSG
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: OrderService-development-AppLT
      LaunchTemplateData:
        ImageId: ami-053b0d53c27927f8a
        InstanceType: t3.medium
        KeyName: your-key-pair
        SecurityGroupIds:
        - Fn::GetAtt:
          - AppSecurityGroup
          - GroupId
        UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - - '#!/bin/bash

                '
              - 'echo "Installing Docker..."

                '
              - 'sudo yum update -y

                '
              - 'sudo yum install docker -y

                '
              - 'sudo service docker start

                '
              - 'sudo usermod -a -G docker ec2-user

                '
              - 'echo "Pulling and running Spring Boot Docker image..."

                '
              - sudo docker run -d -p 8080:8080 yourrepo/orderservice:1.0.0
              - "\n"
      Tags:
      - Key: Name
        Value: OrderService-development-AppLaunchTemplate
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: OrderService-development-ASG
      VPCZoneIdentifier:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      MinSize: '1'
      MaxSize: '3'
      LaunchTemplate:
        LaunchTemplateId:
          Ref: AppLaunchTemplate
        Version: $Latest
      TargetGroupARNs:
      - Ref: AppTargetGroup
      HealthCheckType: ELB
      Tags:
      - Key: Name
        Value: OrderService-development-Instance
        PropagateAtLaunch: true
      - Key: Environment
        Value: development
        PropagateAtLaunch: true
      - Key: Service
        Value: OrderService
        PropagateAtLaunch: true
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OrderService-development-API
      Description: API Gateway for OrderService microservice
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: orders
      RestApiId:
        Ref: ApiGateway
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri:
          Fn::Join:
          - ''
          - - http://
            - Fn::GetAtt:
              - ApplicationLoadBalancer
              - DNSName
            - /orders
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGateway
      Description: Initial deployment
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiGatewayDeployment
      RestApiId:
        Ref: ApiGateway
      StageName: development
Outputs:
  VPCId:
    Description: The ID of the newly created VPC
    Value:
      Ref: VPC
  DatabaseEndpoint:
    Description: Endpoint for the PostgreSQL Database
    Value:
      Fn::GetAtt:
      - PostgreSQLDatabase
      - Endpoint.Address
  ALBDnsName:
    Description: The DNS name of the Application Load Balancer
    Value:
      Fn::GetAtt:
      - ApplicationLoadBalancer
      - DNSName
  APIGatewayInvokeURL:
    Description: The invoke URL for the API Gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ApiGateway
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: ApiGatewayStage
        - /orders