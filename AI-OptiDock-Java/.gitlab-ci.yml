# .gitlab-ci.yml: GitLab CI/CD Pipeline for AI-Driven Dockerization
# This pipeline demonstrates how to integrate the AI-driven Dockerfile recommendation
# into a standard CI/CD workflow for a Java microservice.

# Define global variables
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository" # Cache Maven dependencies
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA # Dynamic image name
  DOCKERFILE_RECOMMENDED: "Dockerfile.recommended" # The file generated by AI recommendation
  JAVA_VERSION: "openjdk:17-jdk-slim" # Base image for Maven build

# Use Docker-in-Docker for building Docker images
services:
  - docker:24.0.5-dind

# Stages of the CI/CD pipeline
stages:
  - build-java
  - ai-recommend-dockerfile
  - docker-build-push
  - deploy # Placeholder for actual deployment

# Cache Maven dependencies to speed up builds
cache:
  paths:
    - .m2/repository
    - target/

# Job for building the Java application
build-java:
  stage: build-java
  image: maven:3.9.6-amazoncorretto-17 # Using Maven image with Java 17
  script:
    - echo "--- Building Java microservice with Maven ---"
    - mvn $MAVEN_OPTS clean package -DskipTests # Clean, compile, and package the JAR, skipping tests
  artifacts:
    paths:
      - target/*.jar # Store the built JAR for subsequent stages
    expire_in: 1 day # Artifacts expire after 1 day

# Job for AI-driven Dockerfile recommendation
ai-recommend-dockerfile:
  stage: ai-recommend-dockerfile
  image: python:3.10-slim-buster # Python image to run the recommendation script
  script:
    - echo "--- Running AI Dockerfile Recommendation Engine ---"
    - python3 recommend_dockerfile.py # Execute the Python script to generate Dockerfile.recommended
    - echo "--- Generated Dockerfile.recommended content: ---"
    - cat $DOCKERFILE_RECOMMENDED # Print the generated Dockerfile for visibility in logs
  artifacts:
    paths:
      - $DOCKERFILE_RECOMMENDED # Store the generated Dockerfile for the next stage
    expire_in: 1 day # Artifacts expire after 1 day

# Job for building and pushing the Docker image
docker-build-push:
  stage: docker-build-push
  image: docker:24.0.5 # Docker client image
  needs: # This job depends on both Java build and AI recommendation
    - build-java
    - ai-recommend-dockerfile
  before_script:
    - echo "--- Logging into Docker Registry ---"
    # Authenticate with GitLab's built-in container registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "--- Building Docker image using AI-recommended Dockerfile ---"
    # The 'Dockerfile.recommended' and the JAR from 'build-java' are available due to 'artifacts'
    - docker build --pull -t $DOCKER_IMAGE_NAME -f $DOCKERFILE_RECOMMENDED .
    - echo "--- Pushing Docker image to registry ---"
    - docker push $DOCKER_IMAGE_NAME
  only: # Only run this job on branches or tags
    - main
    - merge_requests
    - tags

# Placeholder job for deployment
# In a real scenario, this would deploy to Kubernetes, ECS, etc.
deploy:
  stage: deploy
  image: alpine/git # A minimal image, replace with specific deployment tools (e.g., kubectl, helm)
  needs:
    - docker-build-push
  script:
    - echo "--- Deploying ${DOCKER_IMAGE_NAME} to target environment ---"
    # Example: kubectl apply -f kubernetes/deployment.yaml
    - echo "Deployment logic would go here, utilizing the built Docker image."
  only:
    - main # Deploy only from the main branch (or specific deployment branches/tags)