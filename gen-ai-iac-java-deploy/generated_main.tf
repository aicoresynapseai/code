# This file is dynamically generated by 'gen-ai-iac-generator.py' based on your input configuration.
# DO NOT EDIT THIS FILE MANUALLY. Your changes will be overwritten.

provider "aws" {
  region = "us-east-1"
}

# Basic VPC for network isolation
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "OrderService-development-vpc"
    Environment = "development"
  }
}

# Public Subnets for Load Balancer and potentially EC2 instances (for simplicity)
resource "aws_subnet" "public_a" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = true
  tags = {
    Name = "OrderService-development-public-subnet-a"
  }
}

resource "aws_subnet" "public_b" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "us-east-1b"
  map_public_ip_on_launch = true
  tags = {
    Name = "OrderService-development-public-subnet-b"
  }
}

# Internet Gateway to allow communication to/from the internet
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "OrderService-development-igw"
  }
}

# Route Table for public subnets
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
  tags = {
    Name = "OrderService-development-public-rt"
  }
}

# Associate public subnets with route table
resource "aws_route_table_association" "public_a" {
  subnet_id      = aws_subnet.public_a.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "public_b" {
  subnet_id      = aws_subnet.public_b.id
  route_table_id = aws_route_table.public.id
}

# Security Group for Application Load Balancer
resource "aws_security_group" "lb_sg" {
  name        = "OrderService-development-lb-sg"
  description = "Allow HTTP/S traffic to Load Balancer"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "Allow HTTP from anywhere"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTPS from anywhere"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "OrderService-development-lb-sg"
  }
}

# Application Load Balancer
resource "aws_lb" "app_lb" {
  name               = "OrderService-development-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.lb_sg.id]
  subnets            = [aws_subnet.public_a.id, aws_subnet.public_b.id]
  enable_deletion_protection = false # Set to true for production

  tags = {
    Name = "OrderService-development-lb"
  }
}

# Target Group for Spring Boot application
resource "aws_lb_target_group" "app_tg" {
  name     = "OrderService-development-tg"
  port     = 8080 # Spring Boot application port
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id
  health_check {
    path                = "/actuator/health" # Common Spring Boot health endpoint
    protocol            = "HTTP"
    port                = "8080"
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 5
    interval            = 30
    matcher             = "200"
  }
  tags = {
    Name = "OrderService-development-tg"
  }
}

# Listener for the Load Balancer
resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app_tg.arn
  }
  tags = {
    Name = "OrderService-development-http-listener"
  }
}

# Security Group for Spring Boot application (allow HTTP/S and app port)
resource "aws_security_group" "app_sg" {
  name        = "OrderService-development-app-sg"
  description = "Allow HTTP/S and app port for Spring Boot"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "Allow HTTP from anywhere"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTPS from anywhere"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow Spring Boot app port from Load Balancer"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    security_groups = [aws_security_group.lb_sg.id] # Reference LB SG
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "OrderService-development-app-sg"
  }
}

# EC2 Launch Template for Spring Boot
resource "aws_launch_template" "app_lt" {
  name_prefix   = "OrderService-development-app-lt"
  image_id      = "ami-053b0d53c27927f8a" # Example: Amazon Linux 2 AMI (HVM) - SSD Volume Type
  instance_type = "t3.medium"
  key_name      = "your-key-pair" # IMPORTANT: Replace with your actual Key Pair Name
  vpc_security_group_ids = [aws_security_group.app_sg.id]

  user_data = base64encode(<<EOF
#!/bin/bash
echo "Installing Docker..."
sudo yum update -y
sudo yum install docker -y
sudo service docker start
sudo usermod -a -G docker ec2-user
echo "Pulling and running Spring Boot Docker image..."
sudo docker run -d -p 8080:8080 yourrepo/orderservice:1.0.0 # Placeholder for actual Java app
EOF
  )
  tags = {
    Name = "OrderService-development-app-launch-template"
  }
}

# Auto Scaling Group for Spring Boot
resource "aws_autoscaling_group" "app_asg" {
  name                      = "OrderService-development-app-asg"
  vpc_zone_identifier       = [aws_subnet.public_a.id, aws_subnet.public_b.id]
  min_size                  = 1
  max_size                  = 3
  health_check_type         = "ELB"
  target_group_arns         = [aws_lb_target_group.app_tg.arn] # Reference Target Group

  launch_template {
    id      = aws_launch_template.app_lt.id
    version = "$Latest"
  }
  tags_as_resources {
    propagate_at_launch = true
    tags = {
      Name = "OrderService-development-app-instance"
      Environment = "development"
      Service = "OrderService"
    }
  }
}
# Security Group for RDS PostgreSQL (allow traffic from app instances)
resource "aws_security_group" "db_sg" {
  name        = "OrderService-development-db-sg"
  description = "Allow access to RDS PostgreSQL from app security group"
  vpc_id      = aws_vpc.main.id

  ingress {
    description     = "Allow PostgreSQL from application instances"
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [aws_security_group.app_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "OrderService-development-db-sg"
  }
}

# RDS PostgreSQL Instance
resource "aws_db_instance" "postgresql_db" {
  allocated_storage    = 20
  engine               = "postgres"
  engine_version       = "14.5"
  instance_class       = "db.t3.micro"
  name                 = "ordersdb"
  username             = "ordersuser"
  password             = "MySuperSecretPassword123" # IMPORTANT: Use AWS Secrets Manager in production!
  vpc_security_group_ids = [aws_security_group.db_sg.id]
  db_subnet_group_name = aws_db_subnet_group.default.name
  skip_final_snapshot  = true # Set to false for production
  publicly_accessible  = false # Best practice: keep DB private

  tags = {
    Name = "OrderService-development-postgresql-db"
  }
}

# DB Subnet Group (using default VPC subnets for simplicity, create new ones for production)
resource "aws_db_subnet_group" "default" {
  name       = "OrderService-development-db-subnet-group"
  subnet_ids = [aws_subnet.public_a.id, aws_subnet.public_b.id] # Use private subnets in production!
  tags = {
    Name = "OrderService-development-db-subnet-group"
  }
}
# API Gateway for exposing the microservice
resource "aws_api_gateway_rest_api" "main_api" {
  name        = "OrderService-development-api"
  description = "API Gateway for OrderService microservice"

  tags = {
    Name = "OrderService-development-api"
  }
}

resource "aws_api_gateway_resource" "proxy_resource" {
  rest_api_id = aws_api_gateway_rest_api.main_api.id
  parent_id   = aws_api_gateway_rest_api.main_api.root_resource_id
  path_part   = "orders" # Remove leading/trailing slashes
}

resource "aws_api_gateway_method" "proxy_method_any" {
  rest_api_id   = aws_api_gateway_rest_api.main_api.id
  resource_id   = aws_api_gateway_resource.proxy_resource.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "proxy_integration_any" {
  rest_api_id             = aws_api_gateway_rest_api.main_api.id
  resource_id             = aws_api_gateway_resource.proxy_resource.id
  http_method             = aws_api_gateway_method.proxy_method_any.http_method
  type                    = "HTTP_PROXY"
  integration_http_method = "ANY"
  uri                     = "http://${aws_lb.app_lb.dns_name}/orders" # Proxy to ALB
}

resource "aws_api_gateway_deployment" "main_deployment" {
  rest_api_id = aws_api_gateway_rest_api.main_api.id
  # Add a dummy_id to force redeploy on changes to methods/resources
  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.main_api.body))
  }
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "main_stage" {
  deployment_id = aws_api_gateway_deployment.main_deployment.id
  rest_api_id   = aws_api_gateway_rest_api.main_api.id
  stage_name    = "development"
  tags = {
    Name = "OrderService-development-api-stage"
  }
}

output "api_gateway_invoke_url" {
  description = "The invoke URL of the API Gateway"
  value       = aws_api_gateway_stage.main_stage.invoke_url
}

output "alb_dns_name" {
  description = "The DNS name of the Application Load Balancer"
  value       = aws_lb.app_lb.dns_name
}