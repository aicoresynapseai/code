
import boto3
import base64
import sys

# Initialize the IAM client
iam_client = boto3.client('iam')

def create_iam_user(username):
    """
    Creates a new IAM user.
    """
    try:
        print(f"Attempting to create IAM user: {username}...")
        response = iam_client.create_user(UserName=username)
        print(f"IAM user '{username}' created successfully.")
        return response['User']
    except iam_client.exceptions.EntityAlreadyExistsException:
        print(f"IAM user '{username}' already exists.")
        return iam_client.get_user(UserName=username)['User']
    except Exception as e:
        print(f"Error creating user {username}: {e}")
        sys.exit(1)

def attach_policy_to_user(username, policy_arn):
    """
    Attaches an IAM managed policy to a user.
    """
    try:
        print(f"Attempting to attach policy '{policy_arn}' to user '{username}'...")
        iam_client.attach_user_policy(
            UserName=username,
            PolicyArn=policy_arn
        )
        print(f"Policy '{policy_arn}' attached to user '{username}' successfully.")
    except Exception as e:
        print(f"Error attaching policy {policy_arn} to user {username}: {e}")
        sys.exit(1)

def create_virtual_mfa_device(username):
    """
    Creates a virtual MFA device for the given IAM user and provides the Base32 string.
    Note: The user must complete the MFA setup by scanning the QR code or entering the Base32 string
    into an authenticator app and providing two consecutive MFA codes to activate the device.
    """
    try:
        print(f"Attempting to create virtual MFA device for user: {username}...")
        response = iam_client.create_virtual_mfa_device(
            VirtualMFADeviceName=f"{username}-mfa",
            # The QRCodePNG is typically for direct display, SecretKeyBase32 is for manual entry.
            # We'll use SecretKeyBase32 for simplicity in a script output.
        )
        # Decode the Base64-encoded SecretKeyBase32 to get the actual Base32 string
        secret_key_base32 = base64.b64decode(response['VirtualMFADevice']['Base32StringSeed']).decode('utf-8')
        mfa_device_arn = response['VirtualMFADevice']['SerialNumber']

        print(f"\n--- Virtual MFA Device Created ---")
        print(f"MFA Device ARN: {mfa_device_arn}")
        print(f"Base32 Secret Key (for manual entry into authenticator app): {secret_key_base32}")
        print(f"\nIMPORTANT: To complete MFA setup, go to AWS Console -> IAM -> Users -> {username} -> Security credentials.")
        print(f"Click 'Manage' next to 'Assigned MFA device', then 'Activate virtual MFA device'.")
        print(f"Use the Base32 Secret Key above or scan the QR code (if generated by the console) and enter two consecutive MFA codes.")
        print(f"----------------------------------\n")
        return mfa_device_arn
    except Exception as e:
        print(f"Error creating virtual MFA device for user {username}: {e}")
        sys.exit(1)

if __name__ == "__main__":
    user_name = input("Enter the desired IAM username to create: ")
    
    if not user_name:
        print("Username cannot be empty. Exiting.")
        sys.exit(1)

    # 1. Create the IAM User
    user = create_iam_user(user_name)

    # 2. Attach a least-privilege policy (e.g., S3 Read-Only Access)
    # This uses an AWS managed policy for demonstration. In a real scenario,
    # you might attach your custom policies created via Terraform or define them here.
    s3_read_only_policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    attach_policy_to_user(user_name, s3_read_only_policy_arn)

    # 3. Create a Virtual MFA Device for the user
    # This step demonstrates how to provision the device. The user still needs to
    # complete the activation in the AWS console using an authenticator app.
    create_virtual_mfa_device(user_name)

    print(f"\nIAM user '{user_name}' created, S3 Read-Only policy attached, and virtual MFA device provisioning initiated.")
    print("Remember to complete the MFA device activation in the AWS console for enhanced security.")