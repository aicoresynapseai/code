name: AIDepGuard CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B clean install
      - name: Verify build (Optional, if you have tests)
        run: mvn -B test

  dependency_scan_and_recommend:
    runs-on: ubuntu-latest
    needs: build # Ensures build job completes successfully first
    outputs:
      recommendations_found: ${{ steps.check_recommendations.outputs.recommendations_found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Python dependencies
        run: pip install beautifulsoup4 lxml # jq is often pre-installed or can be installed via apt
      - name: Generate Maven dependency tree
        # The `mvn dependency:tree` output is piped to the Python script.
        # The script then analyzes it and outputs JSON recommendations to a file.
        run: mvn dependency:tree > dependency_tree.txt && python scripts/ai_dependency_advisor.py < dependency_tree.txt > recommendations.json
      - name: Upload recommendations as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-recommendations
          path: recommendations.json
      - name: Check if auto-fixable recommendations exist
        id: check_recommendations
        # Check if the recommendations.json contains any "upgrade" actions
        run: |
          HAS_UPGRADES=$(jq '[.[] | select(.recommended_action == "upgrade")] | length > 0' recommendations.json)
          echo "Recommendations found: $HAS_UPGRADES"
          echo "recommendations_found=$HAS_UPGRADES" >> $GITHUB_OUTPUT

  apply_fixes_and_rebuild:
    runs-on: ubuntu-latest
    needs: dependency_scan_and_recommend
    # This job only runs if the previous job indicated auto-fixable recommendations were found.
    if: needs.dependency_scan_and_recommend.outputs.recommendations_found == 'true'
    steps:
      - name: Checkout code
        # Requires write permissions for the GITHUB_TOKEN to commit changes
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Default token, needs write access to contents
          # If the default GITHUB_TOKEN doesn't have enough permissions for push,
          # you might need to create a Personal Access Token (PAT) with repo scope
          # and store it as a repository secret (e.g., `ACTIONS_PAT`)
          # token: ${{ secrets.ACTIONS_PAT }}
      - name: Download recommendations artifact
        uses: actions/download-artifact@v4
        with:
          name: dependency-recommendations
          path: .
      - name: Set up Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Install XMLStarlet (for modifying pom.xml)
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet jq # jq is used by apply_fixes.sh if available
      - name: Apply recommended fixes to pom.xml
        # The apply_fixes.sh script will modify pom.xml and commit the changes.
        # It handles setting git user/email for the commit.
        run: scripts/apply_fixes.sh recommendations.json
      - name: Push changes back to repository
        # This step only runs if there were actual changes committed by the previous step.
        run: |
          git diff --quiet || git push origin HEAD:${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Re-build after fixes
        # Build again to ensure the applied fixes didn't break anything and new dependencies are pulled.
        # This also acts as a final verification step.
        run: mvn -B clean install