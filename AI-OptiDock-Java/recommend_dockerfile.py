import os

# Define the content of the AI-recommended Dockerfile as a multi-line string.
# In a real scenario, this would be generated dynamically by an AI service
# based on analysis of the Java project (e.g., Maven dependencies, Spring Boot version, etc.)
# and optimization goals (e.g., smallest image, fastest build, specific security posture).
AI_RECOMMENDED_DOCKERFILE_CONTENT = """
# AI-Recommended Dockerfile for Java Spring Boot Microservice
# Generated by simulated GenAI for optimized deployment.

# Stage 1: Build the application
# Using a JDK base image for compiling and packaging the application.
# The 'focal' tag ensures a stable, well-supported Ubuntu-based image.
FROM eclipse-temurin:17-jdk-focal as build

# AI Recommendation: Set working directory for consistency.
WORKDIR /app

# AI Recommendation: Copy only the pom.xml first to download dependencies.
# This leverages Docker's layer caching. If pom.xml doesn't change,
# Maven dependencies won't be re-downloaded on subsequent builds, speeding up builds.
COPY pom.xml .

# AI Recommendation: Download project dependencies.
# -Dmaven.wagon.http.pool=false fixes a potential issue with parallel downloads on some networks.
# -Dmaven.repo.local=/app/.m2/repository ensures dependencies are cached within the build context.
RUN --mount=type=cache,target=/root/.m2/repository mvn dependency:go-offline -B -Dmaven.wagon.http.pool=false

# AI Recommendation: Copy the rest of the source code.
COPY src ./src

# AI Recommendation: Package the application into a fat JAR.
# The 'install' goal also runs tests by default; '-DskipTests' can be added if tests are run in a separate stage.
RUN mvn clean install -DskipTests

# Stage 2: Create the final runtime image
# Using a JRE base image for a smaller, production-ready image.
# 'jre-focal' is lighter than 'jdk-focal' as it only contains the Java Runtime Environment.
FROM eclipse-temurin:17-jre-focal as final

# AI Recommendation: Set up a non-root user for security.
# Running as non-root user (e.g., 'spring') mitigates potential security risks.
RUN groupadd --system spring && useradd --system --gid spring spring
USER spring

# AI Recommendation: Expose the application port.
# This informs Docker that the container listens on this port.
EXPOSE 8080

# AI Recommendation: Define environment variables for JVM tuning.
# -Xms and -Xmx set initial and maximum heap size.
# -XX:+ExitOnOutOfMemoryError ensures the container fails fast on OOM.
# -XX:+UseContainerSupport enables JVM to use container-specific memory/CPU limits.
ENV JAVA_OPTS="-Xms256m -Xmx512m -XX:+ExitOnOutOfMemoryError -XX:+UseContainerSupport"

# AI Recommendation: Copy the built JAR from the build stage.
# This copies only the final executable JAR, keeping the runtime image minimal.
COPY --from=build /app/target/*.jar app.jar

# AI Recommendation: Set the entrypoint to run the JAR.
# 'java -jar' is the standard way to run Spring Boot applications.
# Using 'exec' form is preferred as it allows proper signal handling (e.g., for graceful shutdowns).
ENTRYPOINT ["java", "$JAVA_OPTS", "-jar", "app.jar"]

# AI Recommendation: Add metadata for maintainability (optional but good practice).
LABEL maintainer="GenAI-Optimizer <ai-optimizer@example.com>"
LABEL version="1.0"
LABEL description="Optimized Dockerfile for Spring Boot Microservice"
"""

def generate_dockerfile(output_filename="Dockerfile.recommended"):
    """
    Simulates AI generating an optimized Dockerfile and writes it to a file.
    """
    print(f"--- Simulating GenAI Dockerfile Recommendation ---")
    print(f"Analyzing project characteristics (e.g., Java version, Spring Boot, Maven)...")
    print(f"Identifying optimization opportunities for image size, build speed, and security...")
    print(f"Generating optimized Dockerfile content for '{output_filename}'...")

    try:
        with open(output_filename, "w") as f:
            f.write(AI_RECOMMENDED_DOCKERFILE_CONTENT.strip()) # .strip() removes leading/trailing whitespace
        print(f"Successfully generated '{output_filename}' with AI-recommended optimizations.")
        print(f"Review the file for specific recommendations like:")
        print(f"- Multi-stage build for smaller images.")
        print(f"- Layer caching for faster builds (copying pom.xml first, then src).")
        print(f"- Use of non-root user for enhanced security.")
        print(f"- JVM tuning parameters for container environments.")
    except IOError as e:
        print(f"Error writing Dockerfile: {e}")

if __name__ == "__main__":
    generate_dockerfile()