plugins {
    // Apply the Java plugin to add support for Java.
    id 'java'
    // Apply the application plugin to add support for building a runnable JAR.
    id 'application'
}

// Define the main class for the application plugin.
application {
    mainClass = 'com.example.genai.codereviewer.App'
}

group = 'com.example.genai'
version = '0.1.0'

repositories {
    // Use Maven Central for dependencies.
    mavenCentral()
}

dependencies {
    // Add Jackson for JSON processing (serialization and deserialization).
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'

    // Add OkHttp for making HTTP requests to the LLM API.
    // OkHttp is a robust and efficient HTTP client for Java.
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'

    // Use JUnit Jupiter for testing.
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

// Configure test tasks to use JUnit Platform.
test {
    useJUnitPlatform()
}

// Task to create a single executable JAR with all dependencies.
jar {
    manifest {
        attributes 'Main-Class': 'com.example.genai.codereviewer.App'
    }
    // To include all dependencies in the final JAR, use from configurations.runtimeClasspath.
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}