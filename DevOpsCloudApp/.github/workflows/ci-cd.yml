# This GitHub Actions workflow defines our Continuous Integration (CI)
# and Continuous Deployment (CD) pipeline.

name: CI/CD Pipeline for DevOpsCloudApp

# Triggers for the workflow:
# - on push to 'main' branch
# - on pull requests to 'main' branch
# - manually via workflow_dispatch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

# Define jobs to be executed as part of the pipeline
jobs:
  build-and-test:
    # The runner environment where the job will execute
    runs-on: ubuntu-latest
    # Define steps within this job
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Specify the Python version to use

      # Install Python dependencies
      - name: Install dependencies
        run: |
          # Change directory to where requirements.txt is located relative to root
          cd DevOpsCloudApp
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install dependencies from requirements.txt

      # Run unit tests
      - name: Run tests
        run: |
          # Change directory to where tests are located
          cd DevOpsCloudApp/app
          pytest # Execute pytest to run all tests in app_tests.py

      # Build Docker image
      - name: Build Docker image
        run: |
          # Change directory to the root of the project where Dockerfile is
          cd DevOpsCloudApp
          docker build -t devopscloudapp:${{ github.sha }} .
          # Tag with git SHA for unique identification of the build

      # Login to Docker Hub (if publishing to a private/public registry)
      # This step is conditional and only runs if the push is to 'main'
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Use GitHub secrets for sensitive info
          password: ${{ secrets.DOCKER_PASSWORD }} # Ensure these are configured in your repo settings

      # Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Define the full image name including the Docker Hub username
          IMAGE_NAME=yourdockerhubusername/devopscloudapp
          # Tag the image with 'latest' and the Git SHA
          docker tag devopscloudapp:${{ github.sha }} $IMAGE_NAME:latest
          docker tag devopscloudapp:${{ github.sha }} $IMAGE_NAME:${{ github.sha }}
          # Push the tagged images to Docker Hub
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  # A simplified deployment job (conceptual)
  # In a real scenario, this would involve deploying to Kubernetes, ECS, Azure App Service, etc.
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test # This job depends on the 'build-and-test' job completing successfully
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # A placeholder for actual deployment
      - name: Simulate Deployment
        run: |
          echo "Deployment initiated for image yourdockerhubusername/devopscloudapp:${{ github.sha }}"
          echo "Running deployment script..."
          # In a real-world scenario, you would invoke your deployment tool here:
          # e.g., kubectl apply -f kubernetes/deployment.yaml
          # e.g., aws ecs update-service --service your-service --cluster your-cluster --force-new-deployment
          # e.g., az webapp deploy --resource-group your-rg --name your-app --src-path your-docker-image
          
          # For this example, we'll run a placeholder script
          # Make the script executable
          chmod +x DevOpsCloudApp/scripts/deploy.sh
          # Execute the deployment script, passing the image tag
          DevOpsCloudApp/scripts/deploy.sh yourdockerhubusername/devopscloudapp:${{ github.sha }}

      - name: Notify on Deployment Success
        run: |
          echo "DevOpsCloudApp version ${{ github.sha }} successfully deployed!"
          # This could integrate with Slack, Teams, email for notifications